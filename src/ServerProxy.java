/**
 * Created by Neal on 1/24/2017.
 */

import com.sun.org.apache.xml.internal.resolver.readers.ExtendedXMLCatalogReader;

import java.net.*;
import java.io.*;

public class ServerProxy {
    public static void main(String[] args) throws Exception
    {
        try
        {
            String host = "localhost";
            int port = 4000;

            //startServer(host, port);
            startHTTPServer();
        }
        catch(Exception e)
        {
            System.err.println("This is the error" + e);
        }
    }

    private static void startHTTPServer() throws IOException
    {
        String clientInput;
        String ourOutput;
        int port = 4000;

        ServerSocket serverSocket = new ServerSocket(port);
        System.out.println("Listening");

        while(true) {
            Socket connectionSocket = serverSocket.accept();
            System.out.println("Accepted");

            BufferedReader fromClient = new BufferedReader((new InputStreamReader(connectionSocket.getInputStream())));
            DataOutputStream toClient = new DataOutputStream(connectionSocket.getOutputStream());
            toClient.writeBytes("Connection Established\r\n");
            clientInput = fromClient.readLine();
            //
            String[] splitInput = clientInput.split("\\s+");

            if(parseInput(toClient, splitInput))
            {
                try
                {

                    URI url = new URI(splitInput[1]);
                    int urlPort = 0;
                    if(url.getPort() == -1)
                    {
                        if(url.getScheme().equals("http"))
                        {
                            urlPort = 80;
                        }
                        else if (url.getScheme().equals("https"))
                        {
                            urlPort = 443;
                        }
                    }

                    //HttpURLConnection urlConn = (HttpURLConnection) url.openConnection();
                    //urlConn.setRequestMethod("GET");
                    toClient.writeBytes("URL: " + url.toString() + "PORT: " + Integer.toString(urlPort) + "\r\n");
                    Socket urlConn = new Socket(url.getHost(), urlPort);

                    PrintWriter output = new PrintWriter(urlConn.getOutputStream());

                    output.print("GET " + url.getPath() + " HTTP/1.0\r\n" + "Host: " + url.getHost() + "\r\n" + "Connection: close\r\n\r\n");
                    output.flush();
                    //output.writeBytes(splitInput[0] + " " + url.getPath() + " " + splitInput[2] + "\n" +
                    //"Host: " + url.getHost() + "\n" + "Connection: close" + "\n");

                    toClient.writeBytes("GET " + url.getPath() + " HTTP/1.0\r\n" + "Host: " +
                            url.getHost() + "\r\n" + "Connection: close\r\n\r\n");

                    //int responseCode = urlConn.getResponseCode();
                    //toClient.writeBytes("Response code: " + Integer.toString(responseCode) + " Port: " + Integer.toString(url.getPort()));

                    InputStream response = urlConn.getInputStream();

                    BufferedReader reader = new BufferedReader(new InputStreamReader(response));

                    String clientResponse;
                    while((clientResponse = reader.readLine()) != null)
                    {
                        toClient.writeBytes(clientResponse + "\r\n");
                    }

                }
                catch(URISyntaxException e)
                {
                    toClient.writeBytes("(400) Not correct http formatting");
                }

            }
            else
            {
                //close connection, is invalid request from client
                fromClient.close();
                toClient.close();
                connectionSocket.close();
            }



            //toClient.writeBytes(ourOutput);

            //URLConnection URLconn = new URL();
        }
    }

    private static boolean parseInput(DataOutputStream toClient, String[] splitInput) throws IOException
    {
        if(!splitInput[0].equals("GET"))
        {
            toClient.writeBytes("(501) Unsupported Http request");
            return false;
        }
        if(!checkURI(splitInput[1]))
        {
            toClient.writeBytes("(400) Not correct http formatting");
            return false;
        }
        if(!splitInput[2].equals("HTTP/1.0"))
        {
            toClient.writeBytes("(401) Not correct http formatting, or invalid HTTP version request");
            return false;
        }
        return true;
    }

    public static boolean checkURI(String uri)
    {
        try
        {
            URI valueURI = new URI(uri);
            return true;
        }
        catch (URISyntaxException e)
        {
            return false;
        }
    }

    public static void startServer(String host, int port) throws IOException
    {
        String clientInput;
        String ourOutput;

        ServerSocket serverSocket = new ServerSocket(port);
        System.out.println("Listening");

        while(true)
        {
            Socket connectionSocket = serverSocket.accept();
            System.out.println("Accepted");

            BufferedReader fromClient = new BufferedReader((new InputStreamReader( connectionSocket.getInputStream())));
            DataOutputStream toClient = new DataOutputStream(connectionSocket.getOutputStream());
            clientInput = fromClient.readLine();
            ourOutput = clientInput.toUpperCase() + '\n';

            toClient.writeBytes(ourOutput);




        }
    }


}
